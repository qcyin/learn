1.原始构成
syschronized 是关键字属于 JVM 层面，
    monitorenter(底层是通过 monitor 对象来完成，其实 wait/notify 等方法也依赖于 monitor 对象，只有在同步代码块才能调用 wait/notify 等方法)
    monitorenter
lock 是具体类（java.util.concurrent.locks.Lock）是 api 层面的锁

2.使用方式
    syschronized 不需要用户去手动释放锁，当 syschronized 代码块执行完后系统会自动让线程释放对锁的占用
    ReentrantLock 则需要用户去手动释放锁，若没有主动释放锁，就可能导致死锁现象。

3.等待是否可以中断
    syschronized 不可中断。抛出异常或者正常运行完成
    ReentrantLock 可中断。1.设置超时方法 tryLock(long timeout, TimeUnit unit);lockInterruptibly()放代码块中，调用 interrupt()方法可中断

4.加锁是否公平
    syschronized 非公平锁
    ReentrantLock 两张都可以，默认公平锁。构造方法可以传入 boolean 值, true：公平锁；false：非公平锁。

5.绑定多个条件 Condition
    syschronized 不支持
    ReentrantLock 用来实现分组唤醒的线程们，可以精确唤醒，而不是像 syschronized 要么随机唤醒一个线程要么唤醒全部线程